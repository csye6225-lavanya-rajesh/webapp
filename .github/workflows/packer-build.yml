name: Packer Build

on:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.16
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: yarn install

      - name: Wait for PostgreSQL to be Ready
        run: |
          until pg_isready -h localhost -U ${{ secrets.DB_USER }}; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Run Tests
        run: yarn test

  build-artifact:
    name: Build and Upload Application Artifact
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Artifact
        run: |
          echo "Building application artifact..."
          mkdir -p artifacts
          echo "Application Artifact" > artifacts/app.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-artifact
          path: artifacts/app.zip

  build-custom-image:
    name: Build Packer Custom Image (AWS & GCP)
    runs-on: ubuntu-latest
    needs: build-artifact

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-artifact
          path: packer/artifacts

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_CREDENTIALS_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_CREDENTIALS_SECRETACCESSKEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS CLI Configuration
        run: |
          aws sts get-caller-identity

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Verify GCP Authentication
        run: |
          gcloud auth list

      - name: Init Packer
        run: |
          cd packer
          packer init machine-image.pkr.hcl 
        continue-on-error: false
      
      - name: Install zip package
        run: sudo apt-get update && sudo apt-get install -y zip  # Installing zip

      - name: Run Packer Build for AWS & GCP
        run: |
          cd packer
          export PACKER_VAR_artifact_path="../webapp.zip"
          packer build machine-image.pkr.hcl

      - name: Capture AWS AMI ID
        run: |
          AMI_ID=$(grep -o 'ami-[a-f0-9]\{8,17\}' packer-output.txt)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV  # Store AWS AMI ID in GitHub environment

      - name: Capture GCP Image ID
        run: |
          IMAGE_ID=$(grep -o 'custom-gce-image-[0-9]\{10\}' packer-output.txt)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV  # Store GCP Image ID in GitHub environment

      - name: Copy AWS AMI to Demo Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ env.AMI_ID }} \
            --launch-permission "Add=[{UserId=676206931751}]" \
            --region us-east-1 \
            --profile dev

      - name: Copy GCP Image to Demo Account
        run: |
          gcloud compute images add-iam-policy-binding ${{ env.IMAGE_ID }} \
            --project=gcp-dev-452120 \
            --member=projectViewer:gcp-demo-452120 \
            --role=roles/compute.imageUser
