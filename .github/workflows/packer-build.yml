name: Packer Build

on:
  pull_request_target:
    branches:
      - main
    types:
      - closed

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.16
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Verify Node.js Version
        run: node -v

      - name: Clear Yarn Cache
        run: yarn cache clean

      - name: Install Dependencies
        run: yarn install

      - name: Wait for PostgreSQL to be Ready
        run: |
          until pg_isready -h localhost -U ${{ secrets.DB_USER }}; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Run Tests
        run: yarn test

  build-artifact:
    name: Build and Upload Application Artifact
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Artifact
        run: |
          echo "Building application artifact..."
          mkdir -p artifacts
          echo "Application Artifact" > artifacts/app.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-artifact
          path: artifacts/app.zip

  build-custom-image:
    name: Build Packer Custom Image (AWS & GCP)
    runs-on: ubuntu-latest
    needs: build-artifact

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-artifact
          path: packer/artifacts

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_CREDENTIALS_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_CREDENTIALS_SECRETACCESSKEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS CLI Configuration
        run: |
          aws sts get-caller-identity

      # - name: Authenticate with GCP
      #   uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # - name: Verify GCP Authentication
      #   run: |
      #     gcloud auth list

      - name: Init Packer
        run: |
          cd packer
          packer init machine-image.pkr.hcl 
        continue-on-error: false

      - name: Run Packer Build for AWS & GCP
        run: |
          cd packer
          export PACKER_VAR_artifact_path="artifacts/app.zip"
          packer build machine-image.pkr.hcl

      - name: Get Latest AWS AMI ID
        id: aws_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
            --output text \
            --region ${{ secrets.AWS_REGION }})
          echo "AWS AMI ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # - name: Get Latest GCP Image ID
      #   id: gcp_image
      #   run: |
      #     IMAGE_ID=$(gcloud compute images list \
      #       --project=gcp-dev-452120 \
      #       --sort-by=~creationTimestamp \
      #       --format="value(name)" \
      #       --limit=1)
      #     echo "GCP Image ID: $IMAGE_ID"
      #     echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Copy AWS AMI to Demo Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ env.AMI_ID }} \
            --launch-permission "Add=[{UserId=676206931751}]" \
            --region ${{ secrets.AWS_REGION }}

      # - name: Copy GCP Image to Demo Account
      #   run: |
      #     gcloud compute images add-iam-policy-binding ${{ env.IMAGE_ID }} \
      #       --project=gcp-dev-452120 \
      #       --member=serviceAccount:880152553143-compute@developer.gserviceaccount.com \
      #       --role=roles/compute.imageUser

      - name: Configure AWS Demo Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_CREDENTIALS_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_CREDENTIALS_SECRETACCESSKEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS CLI Configuration
        run: |
          aws sts get-caller-identity

      - name: Get Latest Auto Scaling Group Name
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?AutoScalingGroupName!=''].AutoScalingGroupName" \
            --output text | head -n 1)
          echo "ASG_NAME=$ASG_NAME" >> $GITHUB_ENV

      - name: Get Launch Template ID
        run: |
          LAUNCH_TEMPLATE_ID=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --query "AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId" \
            --output text)
          echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

      - name: Create New Launch Template Version and Capture Version Number
        id: new_lt_version
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
            --source-version '$Latest' \
            --launch-template-data "ImageId=${{ env.AMI_ID }}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Auto Scaling Group to Use New Launch Template Version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --launch-template "LaunchTemplateId=${{ env.LAUNCH_TEMPLATE_ID }},Version=${{ env.NEW_VERSION }}"

      - name: Trigger Instance Refresh
        id: refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --preferences '{"InstanceWarmup": 60, "MinHealthyPercentage": 90}' \
            --query "InstanceRefreshId" \
            --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ env.ASG_NAME }} \
              --instance-refresh-ids ${{ env.REFRESH_ID }} \
              --query "InstanceRefreshes[0].Status" \
              --output text)
            echo "Current status: $STATUS"
            
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Refresh succeeded!"
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Refresh failed or was cancelled"
              exit 1
            fi
            sleep 30
          done
